#!/bin/bash

# Source utility functions.
source $OPENSHIFT_CARTRIDGE_SDK_BASH
source "${OPENSHIFT_FEEDHENRY_DIR}/bin/util"
source "${OPENSHIFT_FEEDHENRY_DIR}/bin/nodejs_context"

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"

function status() {
  if is_cartridge_running; then
    client_result "Application is running"
  else
    client_result "Application is not running"
  fi
}  #  End of function  status.

function start() {
  echo "Starting FeedHenry reporter"

  if is_cartridge_running; then
    echo "Application is already running"
    return 0
  fi
  
  ./fhnodejs "${OPENSHIFT_FEEDHENRY_DIR}"/server.js |& /usr/bin/logshifter -tag feedhenry_cartridge &

  retries=3
  while [ $retries -gt 0 ]; do
    cart_pid=$(cartridge_pid)
    [ -n "${cart_pid}" ] && break
    sleep 1
    let retries=${retries}-1
  done

  # ensure file is created before printing it to show startup status
  sleep 2

  
  if [ -n "${cart_pid}" ]; then
      echo "$cart_pid" > "$OPENSHIFT_FEEDHENRY_PID_DIR/cartridge.pid"
      notify "DYNOMAN_DYNO_START_SUCCEEDED";
  else
      echo "FeedHenry reporter for '$OPENSHIFT_APP_NAME' failed to start" 1>&2 1
  fi
}

function stop() {
    echo "Stopping FeedHenry cartridge"

    if cartridge_pidfile_exists; then
      cart_pid=$(cat $OPENSHIFT_FEEDHENRY_PID_DIR/cartridge.pid)
      running_cart_pid=$(cartridge_pid)

      if ! is_cartridge_running; then
        echo "Warning: FeedHenry cartridge is currently not running."
      fi

      echo "`date +"$FMT"`: Stopping FeedHenry reporter ..."

      /bin/kill $cart_pid
      ret=$?

      if [ $ret -eq 0 ]; then
        TIMEOUT="$STOPTIMEOUT"
        while [ $TIMEOUT -gt 0 ]  && is_cartridge_running ; do
          /bin/kill -0 "$cart_pid" >/dev/null 2>&1 || break
          sleep 1
          let TIMEOUT=${TIMEOUT}-1
        done
      fi

      if is_supervisor_running; then
        supervisor=$(supervisor_bin)
        if [ -n "$supervisor" ]; then
          pkill -f "${supervisor}" 2>&1 || :
        fi
      elif is_node_running; then
        node=$(node_bin)
        if [ -n "$node" ]; then
          pkill -f "${node}" 2>&1 || :
        fi
      fi
    else
      if [ -n "$(cartridge_pid)" ]; then
        echo "Warning: FeedHenry reporter exists without a pid file.  Use force-stop to kill."
      fi
    fi
}

function restart() {
  if (stop); then
    start
  else
    start
  fi
}

function post-deploy() {
    echo
}

function pre-repo-archive() {
    rm -rf ${OPENSHIFT_FEEDHENRY_DIR}/tmp/{node_modules,saved.node_modules}

    # If the node_modules/ directory exists, then "stash" it away for redeploy.
    node_modules_dir="${OPENSHIFT_FEEDHENRY_DIR}node_modules"
    if [ -d "$node_modules_dir" ]; then
      echo 'Saving away previously installed Node modules'
      mv "$node_modules_dir" "${OPENSHIFT_FEEDHENRY_DIR}/tmp/saved.node_modules"
      mkdir -p "$node_modules_dir"
    fi
}


function tidy() {
    echo
}

function notify(){
  curl "http://$OPENSHIFT_FEEDHENRY_REPORTER_IP:$OPENSHIFT_FEEDHENRY_REPORTER_PORT/sys/admin/notifications" -H "X-FH-AUTH-APP: $FH_APP_API_KEY" -H 'Content-Type: application/json' --data-binary $"{ \"type\" : \"$1\"}"
}

#
#  main():
#

# Ensure arguments.
if ! [ $# -eq 1 ]; then
    echo "Usage: $0 [start|restart|graceful|graceful-stop|stop|status]"
    exit 1
fi

# Handle commands.
case "$1" in
    start)               start       ;;
    restart|graceful)    restart     ;;
    graceful-stop|stop)  stop        ;;
    status)              status      ;;
    post-deploy)         post-deploy ;;
    tidy)                tidy        ;;
    pre-repo-archive)    pre-repo-archive ;;
    *) exit 0;
esac
