#!/bin/bash
# Utility functions for use in the cartridge scripts.

source $OPENSHIFT_CARTRIDGE_SDK_BASH

function set-configuration {
  version="$1"
  type="${2:-native}"
  scl_string="${3}"
  env_dir="${OPENSHIFT_NODEJS_DIR}/env"

  case "$type" in
    scl)
      local npm_bin=$(echo -n "${OPENSHIFT_REPO_DIR}node_modules/.bin")
      local node_bin=$(echo -n "${OPENSHIFT_HOMEDIR}/.node_modules/.bin")
      local scl_bin=$(dirname $(scl enable $scl_string "which node"))

      echo "${npm_bin}:${node_bin}:${scl_bin}" >$OPENSHIFT_NODEJS_DIR/env/OPENSHIFT_NODEJS_PATH_ELEMENT

      local ld_path=$(LD_LIBRARY_PATH="" scl enable $scl_string "printenv LD_LIBRARY_PATH")
      set_env_var 'OPENSHIFT_NODEJS_LD_LIBRARY_PATH_ELEMENT' $ld_path $env_dir

      local man_path=$(MANPATH="" scl enable $scl_string "printenv MANPATH")
      path_append $MANPATH $man_path >$OPENSHIFT_NODEJS_DIR/env/MANPATH
      ;;
    native)
      rm -f $OPENSHIFT_NODEJS_DIR/env/{LD_LIBRARY_PATH,MANPATH}
      echo -n "${OPENSHIFT_REPO_DIR}node_modules/.bin/:${OPENSHIFT_HOMEDIR}/.node_modules/.bin" > $OPENSHIFT_NODEJS_DIR/env/OPENSHIFT_NODEJS_PATH_ELEMENT
      ;;
  esac
}

# This is the full path for supervisor in its SCL context
function supervisor_bin() {
  nodejs_context "which supervisor"
}

function node_bin() {
  nodejs_context "which node"
}

# All PIDs running node (including supervisor)
# Need to combine double slashes in case our PATH contains them
#
function node_pids() {
  ps -u $(id -u) -o pid= -o cmd= | grep -e '[0-9]\{1,\}\s./fhnodejs\s' | sed -e 's#//#/#g'
}

# Only PIDs with node running supervisor
#
function supervisor_pid() {
  pids=$(node_pids)
  sup_exe=$(supervisor_bin)
  echo "${pids}" | awk "/${sup_exe//\//\/}/ {print \$1}"
}

# Only node PIDs without supervisor
#
function node_pid() {
  pids=$(node_pids)
  sup_exe=$(supervisor_bin)
  echo "${pids}" | awk "!/${sup_exe//\//\/}/ {print \$1}"
}

# If supervisor_pid is empty then assume cartridge is running using npm enabled
#
function cartridge_pid() {
  if [ -z "$(supervisor_pid)" ]; then
    node_pid
  else
    supervisor_pid
  fi
}

# check if the pidfile exists.
# if it does not exist, look for the node or supervisor process 
# and recreate the pidfile if the process exists
function cartridge_pidfile_exists() {
  if [ -f "$OPENSHIFT_FEEDHENRY_PID_DIR/cartridge.pid" ]; then
    return 0
  else
    cart_pid=$(cartridge_pid)
    if [ -n "${cart_pid}" ]; then
      echo ${cart_pid} > $OPENSHIFT_FEEDHENRY_PID_DIR/cartridge.pid
      return 0
    else
      return 1
    fi
  fi
}

function is_node_running() {
    cartridge_pidfile_exists || return 1

    nodepid=$(cat "${OPENSHIFT_FEEDHENRY_PID_DIR}/cartridge.pid")
    [ -n "$nodepid" ]  ||  return 1

    node_command=$(ps --no-heading -ocmd -p $nodepid | sed -e 's#//#/#g')

    # Ensure this is not a supervisor process
    if [[ -n "$node_command" && ! "${node_command}" =~ $(supervisor_bin) ]]; then
       return 0
    fi

    return 1
}

function is_supervisor_running() {
    cartridge_pidfile_exists || return 1

    nodepid=$(cat "${OPENSHIFT_FEEDHENRY_PID_DIR}/cartridge.pid")
    [ -n "$nodepid" ]  ||  return 1

    #  Is the pid a supervisor process.
    if [[ $(ps --no-heading -ocmd -p $nodepid | sed -e 's#//#/#g') =~ $(supervisor_bin) ]]; then
       #  Yes, the app server is a supervisor process.
       return 0
    fi

    return 1
}

function is_cartridge_running() {
  is_supervisor_running || is_node_running
}

# vim: ft=sh
